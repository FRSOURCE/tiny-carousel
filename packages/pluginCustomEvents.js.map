{"version":3,"file":"pluginCustomEvents.js","sources":["../../../../packages/plugin-custom-events/src/index.ts"],"sourcesContent":["import { EventDetailMap, CustomEventListener, on, off, dispatch } from \"@frsource/tiny-carousel-utils\";\nimport type { TinyCarousel, PluginDefinition } from \"@frsource/tiny-carousel-core\";\n\ntype InstanceOnFn = {\n  <E extends keyof EventDetailMap>(event: E, handler: CustomEventListener<E>, options?: boolean | AddEventListenerOptions): TinyCarousel;\n  (event: string, handler: EventListener, options?: boolean | AddEventListenerOptions): TinyCarousel;\n};\n\ntype InstanceOffFn = {\n  <E extends keyof EventDetailMap>(event: E, handler: CustomEventListener<E>): TinyCarousel;\n  (event: string, handler: EventListener): TinyCarousel;\n};\n\ntype InstanceDispatchFn = {\n  <E extends keyof EventDetailMap, P extends EventDetailMap[E]>(event: E, ...[payload, options]: (P extends undefined ? [undefined?, EventInit?] : never)): TinyCarousel;\n  <E extends keyof EventDetailMap>(event: E, payload: EventDetailMap[E], options?: EventInit): TinyCarousel;\n};\n\ndeclare module '@frsource/tiny-carousel-core' {\n  interface TinyCarousel {\n    on: InstanceOnFn;\n    off: InstanceOffFn;\n    dispatch: InstanceDispatchFn;\n  }\n}\n\nexport const pluginCustomEvents = {\n  install: (instance) => {\n    instance.on = function(this: typeof instance, ...args: Parameters<InstanceOnFn>) {\n      on(this.carouselElement, ...args);\n      return this;\n    } as InstanceOnFn;\n    instance.off = function(this: typeof instance, ...args: Parameters<InstanceOffFn>) {\n      off(this.carouselElement, ...args);\n      return this;\n    } as InstanceOffFn;\n    instance.dispatch = function(this: typeof instance, ...args: Parameters<InstanceDispatchFn>) {\n      dispatch(this.carouselElement, ...args);\n      return this;\n    } as InstanceDispatchFn;\n\n    const init = instance.init;\n    instance.init = function(...args) {\n      this.dispatch('before:init');\n      const result = init.apply(this, args);\n      this.dispatch('after:init');\n      return result;\n    };\n\n    const findPossibleItems = instance.findPossibleItems;\n    instance.findPossibleItems = function(...args) {\n      this.dispatch('before:find-possible-items');\n      const result = findPossibleItems.apply(this, args);\n      this.dispatch('after:find-possible-items');\n      return result;\n    };\n\n    const goTo = instance.goTo;\n    instance.goTo = function(...args) {\n      const goToEventPayload = { to: { index: args[0] } };\n      this.dispatch('before:go-to', goToEventPayload);\n      const result = goTo.apply(this, args);\n      result\n        ? this.dispatch('after:go-to', goToEventPayload)\n        : this.dispatch(\n          'error:go-to',\n          Object.assign({}, goToEventPayload, {cause: 'overflow'} as { cause: EventDetailMap['error:go-to']['cause'] })\n        );\n      return result;\n    };\n  }\n} as PluginDefinition<undefined>;\n"],"names":["install","instance","on","this","carouselElement","off","dispatch","init","result","apply","findPossibleItems","goTo","args","goToEventPayload","to","index","Object","assign","cause"],"mappings":"4WA0BkC,CAChCA,QAAS,SAACC,GACRA,EAASC,GAAK,WAEZ,OADAA,mBAAGC,KAAKC,yDAGVH,EAASI,IAAM,WAEb,OADAA,oBAAIF,KAAKC,yDAGXH,EAASK,SAAW,WAElB,OADAA,yBAASH,KAAKC,yDAIhB,IAAMG,EAAON,EAASM,KACtBN,EAASM,KAAO,WACdJ,KAAKG,SAAS,eACd,IAAME,EAASD,EAAKE,MAAMN,+BAE1B,OADAA,KAAKG,SAAS,cACPE,GAGT,IAAME,EAAoBT,EAASS,kBACnCT,EAASS,kBAAoB,WAC3BP,KAAKG,SAAS,8BACd,IAAME,EAASE,EAAkBD,MAAMN,+BAEvC,OADAA,KAAKG,SAAS,6BACPE,GAGT,IAAMG,EAAOV,EAASU,KACtBV,EAASU,KAAO,eAAYC,2BACpBC,EAAmB,CAAEC,GAAI,CAAEC,MAAOH,EAAK,KAC7CT,KAAKG,SAAS,eAAgBO,GAC9B,IAAML,EAASG,EAAKF,MAAMN,KAAMS,GAOhC,OANAJ,EACIL,KAAKG,SAAS,cAAeO,GAC7BV,KAAKG,SACL,cACAU,OAAOC,OAAO,GAAIJ,EAAkB,CAACK,MAAO,cAEzCV"}