{"version":3,"file":"core.umd.js","sources":["../../../../packages/core/src/index.ts"],"sourcesContent":["import { on } from \"@frsource/tiny-carousel-utils\";\nimport type { DeepPartial, OmitFirstItem } from \"./helpers\";\n\nexport type PluginDefinition<C extends unknown[] | undefined = undefined> = C extends unknown[]\n  ? {\n    install(instance: TinyCarousel, ...args: C): void;\n  }\n  : {\n    install(instance: TinyCarousel): void;\n  };\nexport interface Config {\n  active: number;\n  className: string;\n  itemClassName: string;\n  // TODO: better documentation\n  // internal, change only if you know what you're doing!\n  hideScrollClassName: string;\n}\n\nconst _defaultConfig: Config = {\n  active: 0,\n  className: 'frs-tc',\n  itemClassName: 'frs-tc-item',\n  hideScrollClassName: 'frs-hide-scroll', // default frs-hide-scrollbar classname, for private use only\n};\n\n\nexport class TinyCarousel {\n  public config: Config;\n  public items!: HTMLElement[];\n  private _active?: number;\n\n  static get defaultConfig () {\n    return Object.assign({}, _defaultConfig);\n  }\n\n  static updateDefaultConfig (_value: DeepPartial<Config>) {\n    Object.assign(_defaultConfig, _value);\n  }\n\n  constructor(public carouselElement: HTMLElement, _config: DeepPartial<Config> = {}) {\n    this.config = Object.assign({}, _defaultConfig, _config);\n\n    this.items = this.findPossibleItems();\n\n    on(carouselElement, 'scroll', this.resetActive.bind(this), { passive: true });\n  }\n\n  use<PD extends PluginDefinition>(pluginDefinition: PD, ...args: OmitFirstItem<Parameters<PD['install']>>) {\n    (pluginDefinition as PluginDefinition<unknown[]>).install(this, ...args)\n    return this;\n  }\n\n  init() {\n    const { add: addClass } = this.carouselElement.classList;\n    const { config } = this;\n    addClass(config.className);\n    addClass(config.hideScrollClassName);\n\n    this.goTo(config.active);\n\n    return this;\n  }\n\n  private get _carouselScrollPositionX () {\n    const { carouselElement } = this;\n    let scrollPositionX = carouselElement.scrollLeft + carouselElement.clientWidth / 2;\n    // to overcome calculation problems when offsetLeft is calculated not from this.carousel, but from body\n    if (this.items[0]?.offsetParent !== carouselElement) {\n      scrollPositionX += carouselElement.offsetLeft;\n    }\n\n    return scrollPositionX;\n  }\n\n\n  /*\n   * Returns an index of the active item or -1 if items array is empty.\n   */\n  get active () {\n    if (this._active !== void 0) return this._active;\n    const scrollPositionX = this._carouselScrollPositionX;\n    let i = -1;\n    let item: HTMLElement;\n    while (!!(item = this.items[++i]) && scrollPositionX >= item.offsetLeft);\n    return this._active = --i;\n  }\n\n  goTo (n: number): boolean {\n    // recursion to avoid situations when -n > this.items.length\n    if (n < 0) return this.goTo(n + this.items.length);\n    \n    const last = this.items.length - 1;\n    if (n > last) return false;\n\n    this.carouselElement.scrollLeft = this.items[n].offsetLeft;\n\n    return true;\n  }\n\n  next () {\n    return this.goTo(this.active + 1);\n  }\n\n  prev () {\n    return this.active > 0 && this.goTo(this.active - 1);\n  }\n\n  resetActive () {\n    this._active = void 0;\n  }\n  \n  findPossibleItems () {\n    const children = Array.from(this.carouselElement.children) as HTMLElement[];\n    const { itemClassName } = this.config;\n    const filtredChildren = children.filter(child => child.classList.contains(itemClassName));\n\n    if (filtredChildren.length) {\n      return filtredChildren;\n    } else {\n      children.forEach(child => {\n        child.classList.add(itemClassName)\n      });\n      return children;\n    }\n  }\n}\n\n\n"],"names":["_defaultConfig","active","className","itemClassName","hideScrollClassName","carouselElement","_config","this","config","Object","assign","items","findPossibleItems","on","resetActive","bind","passive","TinyCarousel","updateDefaultConfig","_value","use","pluginDefinition","install","init","addClass","classList","add","goTo","n","length","scrollLeft","offsetLeft","next","prev","_active","children","Array","from","filtredChildren","filter","child","contains","forEach","scrollPositionX","clientWidth","offsetParent","item","_carouselScrollPositionX","i"],"mappings":"+eAmBA,IAAMA,EAAyB,CAC7BC,OAAQ,EACRC,UAAW,SACXC,cAAe,cACfC,oBAAqB,6CAiBrB,WAAmBC,EAA8BC,YAAAA,IAAAA,EAA+B,IAA7DC,qBAAAF,EACjBE,KAAKC,OAASC,OAAOC,OAAO,GAAIV,EAAgBM,GAEhDC,KAAKI,MAAQJ,KAAKK,oBAElBC,KAAGR,EAAiB,SAAUE,KAAKO,YAAYC,KAAKR,MAAO,CAAES,SAAS,IAlB1EC,EASSC,oBAAP,SAA4BC,GAC1BV,OAAOC,OAAOV,EAAgBmB,qCAWhCC,IAAA,SAAiCC,GAE/B,OADCA,EAAiDC,cAAjDD,GAAyDd,kDAI5DgB,KAAA,eACeC,EAAajB,KAAKF,gBAAgBoB,UAAvCC,IACAlB,EAAWD,KAAXC,OAMR,OALAgB,EAAShB,EAAON,WAChBsB,EAAShB,EAAOJ,qBAEhBG,KAAKoB,KAAKnB,EAAOP,gBA6BnB0B,KAAA,SAAMC,GAEJ,OAAIA,EAAI,OAAeD,KAAKC,EAAIrB,KAAKI,MAAMkB,UAGvCD,EADSrB,KAAKI,MAAMkB,OAAS,IAGjCtB,KAAKF,gBAAgByB,WAAavB,KAAKI,MAAMiB,GAAGG,kBAKlDC,KAAA,WACE,YAAYL,KAAKpB,KAAKN,OAAS,MAGjCgC,KAAA,WACE,YAAYhC,OAAS,GAAKM,KAAKoB,KAAKpB,KAAKN,OAAS,MAGpDa,YAAA,WACEP,KAAK2B,OAAU,KAGjBtB,kBAAA,WACE,IAAMuB,EAAWC,MAAMC,KAAK9B,KAAKF,gBAAgB8B,UACzChC,EAAkBI,KAAKC,OAAvBL,cACFmC,EAAkBH,EAASI,OAAO,SAAAC,UAASA,EAAMf,UAAUgB,SAAStC,KAE1E,OAAImC,EAAgBT,OACXS,GAEPH,EAASO,QAAQ,SAAAF,GACfA,EAAMf,UAAUC,IAAIvB,KAEfgC,+CA1FT,OAAO1B,OAAOC,OAAO,GAAIV,+DAgCjBK,EAAoBE,KAApBF,gBACJsC,EAAkBtC,EAAgByB,WAAazB,EAAgBuC,YAAc,EAMjF,qBAJSjC,MAAM,aAAIkC,gBAAiBxC,IAClCsC,GAAmBtC,EAAgB0B,YAG9BY,iCAQP,QAAqB,IAAjBpC,KAAK2B,EAAoB,YAAYA,EAIzC,IAHA,IAEIY,EAFEH,EAAkBpC,KAAKwC,EACzBC,GAAK,GAECF,EAAOvC,KAAKI,QAAQqC,KAAOL,GAAmBG,EAAKf,aAC7D,YAAYG,IAAYc"}