{"version":3,"file":"core.js","sources":["../../../../packages/core/src/index.ts"],"sourcesContent":["import { on } from \"@frsource/tiny-carousel-utils\";\nimport type { DeepPartial, OmitFirstItem } from \"./helpers\";\n\nexport type PluginDefinition<C extends unknown[] | undefined = undefined> = C extends unknown[]\n  ? {\n    install(instance: TinyCarousel, ...args: C): void;\n  }\n  : {\n    install(instance: TinyCarousel): void;\n  };\nexport interface Config {\n  active: number;\n  className: string;\n  itemClassName: string;\n  // TODO: better documentation\n  // internal, change only if you know what you're doing!\n  hideScrollClassName: string;\n}\n\nconst _defaultConfig: Config = {\n  active: 0,\n  className: 'frs-tc',\n  itemClassName: 'frs-tc-item',\n  hideScrollClassName: 'frs-hide-scroll', // default frs-hide-scrollbar classname, for private use only\n};\n\n\nexport class TinyCarousel {\n  public config: Config;\n  public items!: HTMLElement[];\n  private _active?: number;\n\n  static get defaultConfig () {\n    return Object.assign({}, _defaultConfig);\n  }\n\n  static updateDefaultConfig (_value: DeepPartial<Config>) {\n    Object.assign(_defaultConfig, _value);\n  }\n\n  constructor(public carouselElement: HTMLElement, _config: DeepPartial<Config> = {}) {\n    this.config = Object.assign({}, _defaultConfig, _config);\n\n    this.items = this.findPossibleItems();\n\n    on(this.carouselElement, 'scroll', this.resetActive.bind(this), { passive: true });\n  }\n\n  use<PD extends PluginDefinition>(pluginDefinition: PD, ...args: OmitFirstItem<Parameters<PD['install']>>) {\n    (pluginDefinition as PluginDefinition<unknown[]>).install(this, ...args)\n    return this;\n  }\n\n  init() {\n    this.carouselElement.classList.add(this.config.className);\n    this.carouselElement.classList.add(this.config.hideScrollClassName);\n\n    this.goTo(this.config.active);\n\n    return this;\n  }\n\n  private get _carouselScrollPositionX () {\n    let scrollPositionX = this.carouselElement.scrollLeft + this.carouselElement.clientWidth / 2;\n    // to overcome calculation problems when offsetLeft is calculated not from this.carousel, but from body\n    if (this.items[0]?.offsetParent !== this.carouselElement) {\n      scrollPositionX += this.carouselElement.offsetLeft;\n    }\n\n    return scrollPositionX;\n  }\n\n\n  /*\n   * Returns an index of the active item or -1 if items array is empty.\n   */\n  get active () {\n    if (this._active !== void 0) return this._active;\n    const scrollPositionX = this._carouselScrollPositionX;\n    let i = -1;\n    let item: HTMLElement;\n    while (!!(item = this.items[++i]) && scrollPositionX >= item.offsetLeft);\n    return this._active = --i;\n  }\n\n  goTo (n: number): boolean {\n    // recursion to avoid situations when -n > this.items.length\n    if (n < 0) return this.goTo(n + this.items.length);\n    \n    const last = this.items.length - 1;\n    if (n > last) return false;\n\n    this.carouselElement.scrollLeft = this.items[n].offsetLeft;\n\n    return true;\n  }\n\n  next () {\n    return this.goTo(this.active + 1);\n  }\n\n  prev () {\n    return this.active > 0 && this.goTo(this.active - 1);\n  }\n\n  resetActive () {\n    this._active = void 0;\n  }\n  \n  findPossibleItems () {\n    const children = Array.from(this.carouselElement.children) as HTMLElement[];\n    const filtredChildren = children.filter(child => child.classList.contains(this.config.itemClassName));\n\n    if (filtredChildren.length) {\n      return filtredChildren;\n    } else {\n      children.forEach(child => {\n        child.classList.add(this.config.itemClassName)\n      });\n      return children;\n    }\n  }\n}\n\n\n"],"names":["_defaultConfig","active","className","itemClassName","hideScrollClassName","carouselElement","_config","this","config","Object","assign","items","findPossibleItems","on","resetActive","bind","passive","TinyCarousel","updateDefaultConfig","_value","use","pluginDefinition","install","init","classList","add","goTo","n","length","scrollLeft","offsetLeft","next","prev","_active","children","Array","from","filtredChildren","filter","child","contains","_this","forEach","scrollPositionX","clientWidth","offsetParent","item","_carouselScrollPositionX","i"],"mappings":"+eAmBA,IAAMA,EAAyB,CAC7BC,OAAQ,EACRC,UAAW,SACXC,cAAe,cACfC,oBAAqB,6CAiBrB,WAAmBC,EAA8BC,YAAAA,IAAAA,EAA+B,IAA7DC,qBAAAF,EACjBE,KAAKC,OAASC,OAAOC,OAAO,GAAIV,EAAgBM,GAEhDC,KAAKI,MAAQJ,KAAKK,oBAElBC,KAAGN,KAAKF,gBAAiB,SAAUE,KAAKO,YAAYC,KAAKR,MAAO,CAAES,SAAS,IAlB/EC,EASSC,oBAAP,SAA4BC,GAC1BV,OAAOC,OAAOV,EAAgBmB,qCAWhCC,IAAA,SAAiCC,GAE/B,OADCA,EAAiDC,cAAjDD,GAAyDd,kDAI5DgB,KAAA,WAME,OALAhB,KAAKF,gBAAgBmB,UAAUC,IAAIlB,KAAKC,OAAON,WAC/CK,KAAKF,gBAAgBmB,UAAUC,IAAIlB,KAAKC,OAAOJ,qBAE/CG,KAAKmB,KAAKnB,KAAKC,OAAOP,gBA4BxByB,KAAA,SAAMC,GAEJ,OAAIA,EAAI,OAAeD,KAAKC,EAAIpB,KAAKI,MAAMiB,UAGvCD,EADSpB,KAAKI,MAAMiB,OAAS,IAGjCrB,KAAKF,gBAAgBwB,WAAatB,KAAKI,MAAMgB,GAAGG,kBAKlDC,KAAA,WACE,YAAYL,KAAKnB,KAAKN,OAAS,MAGjC+B,KAAA,WACE,YAAY/B,OAAS,GAAKM,KAAKmB,KAAKnB,KAAKN,OAAS,MAGpDa,YAAA,WACEP,KAAK0B,aAAU,KAGjBrB,kBAAA,sBACQsB,EAAWC,MAAMC,KAAK7B,KAAKF,gBAAgB6B,UAC3CG,EAAkBH,EAASI,OAAO,SAAAC,UAASA,EAAMf,UAAUgB,SAASC,EAAKjC,OAAOL,iBAEtF,OAAIkC,EAAgBT,OACXS,GAEPH,EAASQ,QAAQ,SAAAH,GACfA,EAAMf,UAAUC,IAAIgB,EAAKjC,OAAOL,iBAE3B+B,+CAtFT,OAAOzB,OAAOC,OAAO,GAAIV,+DA8BrB2C,EAAkBpC,KAAKF,gBAAgBwB,WAAatB,KAAKF,gBAAgBuC,YAAc,EAM3F,qBAJSjC,MAAM,aAAIkC,gBAAiBtC,KAAKF,kBACvCsC,GAAmBpC,KAAKF,gBAAgByB,YAGnCa,iCAQP,QAAqB,IAAjBpC,KAAK0B,QAAoB,YAAYA,QAIzC,IAHA,IAEIa,EAFEH,EAAkBpC,KAAKwC,yBACzBC,GAAK,GAECF,EAAOvC,KAAKI,QAAQqC,KAAOL,GAAmBG,EAAKhB,aAC7D,YAAYG,UAAYe"}