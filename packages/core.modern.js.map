{"version":3,"file":"core.modern.js","sources":["../../../../packages/core/src/index.ts"],"sourcesContent":["import { on } from \"@frsource/tiny-carousel-utils\";\nimport type { DeepPartial, OmitFirstItem } from \"./helpers\";\n\nexport type PluginDefinition<C extends unknown[] | undefined = undefined> = C extends unknown[]\n  ? {\n    install(instance: TinyCarousel, ...args: C): void;\n  }\n  : {\n    install(instance: TinyCarousel): void;\n  };\nexport interface Config {\n  active: number;\n  className: string;\n  itemClassName: string;\n  // TODO: better documentation\n  // internal, change only if you know what you're doing!\n  hideScrollClassName: string;\n}\n\nconst _defaultConfig: Config = {\n  active: 0,\n  className: 'frs-tc',\n  itemClassName: 'frs-tc-item',\n  hideScrollClassName: 'frs-hide-scroll', // default frs-hide-scrollbar classname, for private use only\n};\n\n\nexport class TinyCarousel {\n  public config: Config;\n  public items!: HTMLElement[];\n  private _active?: number;\n\n  static get defaultConfig () {\n    return Object.assign({}, _defaultConfig);\n  }\n\n  static updateDefaultConfig (_value: DeepPartial<Config>) {\n    Object.assign(_defaultConfig, _value);\n  }\n\n  constructor(public carouselElement: HTMLElement, _config: DeepPartial<Config> = {}) {\n    this.config = Object.assign({}, _defaultConfig, _config);\n\n    this.items = this.findPossibleItems();\n\n    on(carouselElement, 'scroll', this.resetActive.bind(this), { passive: true });\n  }\n\n  use<PD extends PluginDefinition>(pluginDefinition: PD, ...args: OmitFirstItem<Parameters<PD['install']>>) {\n    (pluginDefinition as PluginDefinition<unknown[]>).install(this, ...args)\n    return this;\n  }\n\n  init() {\n    const { add: addClass } = this.carouselElement.classList;\n    const { config } = this;\n    addClass(config.className);\n    addClass(config.hideScrollClassName);\n\n    this.goTo(config.active);\n\n    return this;\n  }\n\n  private get _carouselScrollPositionX () {\n    const { carouselElement } = this;\n    let scrollPositionX = carouselElement.scrollLeft + carouselElement.clientWidth / 2;\n    // to overcome calculation problems when offsetLeft is calculated not from this.carousel, but from body\n    if (this.items[0]?.offsetParent !== carouselElement) {\n      scrollPositionX += carouselElement.offsetLeft;\n    }\n\n    return scrollPositionX;\n  }\n\n\n  /*\n   * Returns an index of the active item or -1 if items array is empty.\n   */\n  get active () {\n    if (this._active !== void 0) return this._active;\n    const scrollPositionX = this._carouselScrollPositionX;\n    let i = -1;\n    let item: HTMLElement;\n    while (!!(item = this.items[++i]) && scrollPositionX >= item.offsetLeft);\n    return this._active = --i;\n  }\n\n  goTo (n: number): boolean {\n    // recursion to avoid situations when -n > this.items.length\n    if (n < 0) return this.goTo(n + this.items.length);\n    \n    const last = this.items.length - 1;\n    if (n > last) return false;\n\n    this.carouselElement.scrollLeft = this.items[n].offsetLeft;\n\n    return true;\n  }\n\n  next () {\n    return this.goTo(this.active + 1);\n  }\n\n  prev () {\n    return this.active > 0 && this.goTo(this.active - 1);\n  }\n\n  resetActive () {\n    this._active = void 0;\n  }\n  \n  findPossibleItems () {\n    const children = Array.from(this.carouselElement.children) as HTMLElement[];\n    const { itemClassName } = this.config;\n    const filtredChildren = children.filter(child => child.classList.contains(itemClassName));\n\n    if (filtredChildren.length) {\n      return filtredChildren;\n    } else {\n      children.forEach(child => {\n        child.classList.add(itemClassName)\n      });\n      return children;\n    }\n  }\n}\n\n\n"],"names":["_defaultConfig","active","className","itemClassName","hideScrollClassName","TinyCarousel","constructor","carouselElement","_config","this","config","Object","assign","items","findPossibleItems","on","resetActive","bind","passive","defaultConfig","[object Object]","_value","use","pluginDefinition","args","install","init","add","addClass","classList","goTo","t","scrollPositionX","scrollLeft","clientWidth","offsetParent","offsetLeft","_active","_carouselScrollPositionX","item","i","n","length","next","prev","children","Array","from","filtredChildren","filter","child","contains","forEach"],"mappings":"mDAmBA,MAAMA,EAAyB,CAC7BC,OAAQ,EACRC,UAAW,SACXC,cAAe,cACfC,oBAAqB,yBAIVC,EAaXC,YAAmBC,EAA8BC,EAA+B,IAA7DC,qBAAAF,EACjBE,KAAKC,OAASC,OAAOC,OAAO,GAAIZ,EAAgBQ,GAEhDC,KAAKI,MAAQJ,KAAKK,oBAElBC,EAAGR,EAAiB,SAAUE,KAAKO,YAAYC,KAAKR,MAAO,CAAES,SAAS,IAbxEC,2BACE,OAAOR,OAAOC,OAAO,GAAIZ,GAG3BoB,2BAA4BC,GAC1BV,OAAOC,OAAOZ,EAAgBqB,GAWhCC,IAAiCC,KAAyBC,GAExD,OADCD,EAAiDE,QAAQhB,QAASe,QAIrEE,OACE,MAAQC,IAAKC,GAAanB,KAAKF,gBAAgBsB,WACzCnB,OAAEA,GAAWD,KAMnB,OALAmB,EAASlB,EAAOR,WAChB0B,EAASlB,EAAON,qBAEhBK,KAAKqB,KAAKpB,EAAOT,aAKnB8B,cACE,MAAMxB,gBAAEA,GAAoBE,KAC5B,IAAIuB,EAAkBzB,EAAgB0B,WAAa1B,EAAgB2B,YAAc,EAMjF,qBAJSrB,MAAM,aAAIsB,gBAAiB5B,IAClCyB,GAAmBzB,EAAgB6B,YAG9BJ,EAOT/B,aACE,QAAqB,IAAjBQ,KAAK4B,EAAoB,YAAYA,EACzC,MAAML,EAAkBvB,KAAK6B,EAC7B,IACIC,EADAC,GAAK,EAET,MAAUD,EAAO9B,KAAKI,QAAQ2B,KAAOR,GAAmBO,EAAKH,aAC7D,YAAYC,IAAYG,EAG1BV,KAAMW,GAEJ,OAAIA,EAAI,OAAeX,KAAKW,EAAIhC,KAAKI,MAAM6B,UAGvCD,EADShC,KAAKI,MAAM6B,OAAS,IAGjCjC,KAAKF,gBAAgB0B,WAAaxB,KAAKI,MAAM4B,GAAGL,eAKlDO,OACE,YAAYb,KAAKrB,KAAKR,OAAS,GAGjC2C,OACE,YAAY3C,OAAS,GAAKQ,KAAKqB,KAAKrB,KAAKR,OAAS,GAGpDe,cACEP,KAAK4B,OAAU,EAGjBvB,oBACE,MAAM+B,EAAWC,MAAMC,KAAKtC,KAAKF,gBAAgBsC,WAC3C1C,cAAEA,GAAkBM,KAAKC,OACzBsC,EAAkBH,EAASI,OAAOC,GAASA,EAAMrB,UAAUsB,SAAShD,IAE1E,OAAI6C,EAAgBN,OACXM,GAEPH,EAASO,QAAQF,IACfA,EAAMrB,UAAUF,IAAIxB,KAEf0C"}